<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">UserCompanyDataStream</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">UserCompanyAPI</data>
      <data key="d7" />
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: validate CQRS requests</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: put event streams from dynamodb to SNS (FIFO) and archive into S3</data>
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: handle business event</data>
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: handle client queries</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">SQS</data>
      <data key="d7">NOTES: FIFO</data>
    </node>
    <node id="7">
      <data key="d5" />
      <data key="d6">DynamoDB</data>
      <data key="d7">DATA_PEEK: event store as a table in DynamoDB</data>
    </node>
    <node id="8">
      <data key="d5" />
      <data key="d6">DynamoDB</data>
      <data key="d7">NOTES: the video suggests it saves building queries at runtime; learn the read models that the customers need from MySQL databases
DATA_PEEK: read models (projections for reading data)</data>
    </node>
    <node id="9">
      <data key="d5" />
      <data key="d6">SNS</data>
      <data key="d7">NOTES: FIFO; fan-out to multiple SQS queues</data>
    </node>
    <node id="10">
      <data key="d5" />
      <data key="d6">S3</data>
      <data key="d7">DATA_PEEK: archived event streams</data>
    </node>
    <edge source="0" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="2" target="7" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="9" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="10" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="8" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">6</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="8" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="5" target="1" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">data</data>
    </edge>
    <edge source="6" target="4" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">5</data>
      <data key="d11">data</data>
    </edge>
    <edge source="7" target="3" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="8" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="9" target="6" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">4</data>
      <data key="d11">data</data>
    </edge>
    <edge source="10" target="3" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3'.0</data>
      <data key="d11">meta</data>
    </edge>
    <data key="d0">Coople: Serverless CQRS and Event Sourcing</data>
    <data key="d1">https://www.youtube.com/watch?v=WtCfHP6rUAY</data>
    <data key="d2">Digital staff platform.
    Migrate CQRS from traditional datacenters to AWS. Specifically mentions the event store is migrated from MySQL to DynamoDB.
    Interesting modular fan-out design: events go to SNS (FIFO); every service that subscribe events by letting SNS (FIFO) sends notifications to SQS (FIFO).
    Previously used SNS and SQS without FIFO; by switching to FIFO, they can remove the components for ordering.</data>
    <data key="d3">interactive,control</data>
    <data key="d4">True</data>
  </graph>
</graphml>
