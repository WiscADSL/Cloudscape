<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">NLB</data>
      <data key="d7" />
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">AUTOSCALE: True
WORKLOAD_PEEK: replicated binary that maintains shared state using elasticache pub/sub, and decides which db to route request to.</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">ElastiCache</data>
      <data key="d7">NOTES: uses pub/sub service of elasticache. similar to SNS, but very low latency.</data>
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">RDS</data>
      <data key="d7" />
    </node>
    <edge source="0" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="0" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">7</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="2" target="3" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="4" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">4</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">6</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="3" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="3" target="2" id="1">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">5</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Heimdall Data: Scale-Out Amazon RDS with Strong Consistency</data>
    <data key="d1">https://www.youtube.com/watch?v=mT4KDGRgo4k</data>
    <data key="d2">database proxy
    monitoring system to ensure consistency
    External DB updates to let know of the proxy updates
    A general framework to easy scaleout DB instances for read heavy workloads. Heimdall does lag detection and find the right table to read the data from.
    Effective use of all replicas. No need to implement scaleout on thrie own.
    This video is in general a very vague idea of how to scale-out DBs. It is just a framework.
    Side question: why is this even needed? Can't you configure most DBs to provide strong consistency?</data>
    <data key="d3">control</data>
    <data key="d4">False</data>
  </graph>
</graphml>
