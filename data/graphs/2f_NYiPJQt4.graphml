<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">Cognito</data>
      <data key="d7">NOTES: flexibility: can start with simple; provide advanced features like MFA; later can transit to a more sophisticated setup (e.g., with Okta, Microsoft Active Directory)</data>
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">ALB</data>
      <data key="d7" />
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">EFS</data>
      <data key="d7">NOTES: connect all EC2 instances within the cluster</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">S2SVPN</data>
      <data key="d7" />
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">SCALERANGE: 3+ appway cluster nodes in different AZs
WORKLOAD_PEEK: The core Appway is a Java-based web application on a Apache Tomcat server. Front-end is built with React (HTML, JavaScript, CSS); the backend is all Java with Jersey as REST framework. Internally use Hazelcast to connect multiple Appway instances to one Appway cluster.</data>
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">S3</data>
      <data key="d7">DATA_PEEK: a serverless management tool; React-based single-page application</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">ApiGateway</data>
      <data key="d7" />
    </node>
    <node id="7">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: Execute management tasks, e.g., setup new AWS account, provision new Appway cluster</data>
    </node>
    <node id="8">
      <data key="d5" />
      <data key="d6">ControlTower</data>
      <data key="d7">NOTES: enforces policies for every account created by AWS Organizations, e.g., encryption on EBS volumes</data>
    </node>
    <node id="9">
      <data key="d5" />
      <data key="d6">Organizations</data>
      <data key="d7" />
    </node>
    <edge source="1" target="4" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="2" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="0" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="3" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="6" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="6" target="7" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="7" target="9" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="7" target="4" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">2'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="8" target="9" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Appway: Securing Sensitive Banking Workflows with Isolated Architecture on AWS</data>
    <data key="d1">https://www.youtube.com/watch?v=2f_NYiPJQt4</data>
    <data key="d2">Provide web applications for financial services institutions, which have tough security requirements.
    use of cloud organizations and aws accounts for isolation of resources, e.g, each customer has its own account.
    Whenever possible, use DevOps tools like TerraForm or Puppet to manage the whole infrastructure as code.
    There are other services not shown in the graph, e.g., AWS Single Sign-On, CloudWatch, CloudTrail, Key Management Service.</data>
    <data key="d3">control</data>
    <data key="d4">True</data>
  </graph>
</graphml>
