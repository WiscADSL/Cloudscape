<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">OnPremDC</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">UserConsumerMobile</data>
      <data key="d7" />
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">EKS</data>
      <data key="d7">REGIONS: 20</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">S3</data>
      <data key="d7" />
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">Glue</data>
      <data key="d7" />
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">MSK</data>
      <data key="d7">REGIONS: 5</data>
    </node>
    <node id="6">
      <data key="d5">Databricks</data>
      <data key="d6">ThirdParty</data>
      <data key="d7">NAME: Databricks</data>
    </node>
    <edge source="0" target="5" id="0">
      <data key="d8">0</data>
      <data key="d9">mirror maker to buffer and send data (n/w connectivity a challenge at peak player).</data>
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="0" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="2" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9">Spark streaming job</data>
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="4" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="6" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">4</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="3" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Riot Games: A new data ingest pipeline for league of legends using MSK</data>
    <data key="d1">https://www.youtube.com/watch?v=iwZLadQ3XpY</data>
    <data key="d2">Api in EKS,  Network can become congested (between AWS and riot direct network), hybrid architecture, 
Benefit:Within 5 minute engagement analytics of a patch rollout. (Seems interactive than batchy).

Scale:
 ~millions in 20+ shards(global), 8TB day/data, 1/2 million events/second, 

Benefit: time to get information from 6-24 hours -&gt; 5 minutes.
Novely: Hybrid architecture	

Dataflow:
	Users/servers -&gt; EKS -&gt; MSK (managed streaming for kafka) 5 regions autoscale up/out, 
	MSK has spark job -&gt; S3 (data lake) 
	Consumer uses GLUE, a metadata store (databricks?)
Servers buffer data using MirrorMaker to send data to MSK (network congestion at peak players)</data>
    <data key="d3">data_ingestion</data>
    <data key="d4">True</data>
  </graph>
</graphml>
