<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">UserConsumerAPI</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">ApiGateway</data>
      <data key="d7" />
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">SCALE_RANGE: 6000 calls/s, 200k records/validation
WORKLOAD_PEEK: input validation before ingesting into DB</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: data processing</data>
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: trigger for new data arrival in S3 to send SQS message</data>
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">S3</data>
      <data key="d7">DATA_PEEK: all raw data</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">S3</data>
      <data key="d7">DATA_PEEK: processed data before loading into Redshift</data>
    </node>
    <node id="7">
      <data key="d5" />
      <data key="d6">DynamoDB</data>
      <data key="d7">DATA_PEEK: all raw data</data>
    </node>
    <node id="8">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">WORKLOAD_PEEK: prepare non-SQL data for Redshift loading</data>
    </node>
    <node id="9">
      <data key="d5" />
      <data key="d6">SQS</data>
      <data key="d7" />
    </node>
    <node id="10">
      <data key="d5" />
      <data key="d6">RedShift</data>
      <data key="d7">DATA_PEEK: processed fact tables</data>
    </node>
    <node id="11">
      <data key="d5" />
      <data key="d6">QuickSight</data>
      <data key="d7" />
    </node>
    <node id="12">
      <data key="d5" />
      <data key="d6">DataPipeline</data>
      <data key="d7" />
    </node>
    <edge source="0" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="7" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="5" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="9" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2'.1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="4" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2'.0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="6" target="12" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="7" target="8" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="8" target="7" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="8" target="6" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="9" target="3" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="10" target="11" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="12" target="10" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Dentsu Tracking: Using Serverless to Power an EU Government Supply-Chain Control System</data>
    <data key="d1">https://www.youtube.com/watch?v=rRvy5Fbei1s</data>
    <data key="d2">usecase: tobacco tracking in EU: 150 billion packs stored for 5 years.. 6000 calls per second.. 200k records -&gt; need to be validated by single lambda. heavy parellelism. It is interesting that the data seems to be stored both S3 and DynamoDB; it also uses a hybrid of EC2 and Lambda. using EC2 in the middle because they test and find this step requires massive computing, and EC2 is more cost-efficient</data>
    <data key="d3">data_ingestion</data>
    <data key="d4">True</data>
  </graph>
</graphml>
