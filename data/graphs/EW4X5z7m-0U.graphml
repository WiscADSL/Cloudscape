<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">ELB</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">WORKLOAD_PEEK: networking agents, data sniffing</data>
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">PrivateLink</data>
      <data key="d7" />
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">CloudFront</data>
      <data key="d7" />
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">Kinesis</data>
      <data key="d7" />
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">DynamoDB</data>
      <data key="d7">DATA_PEEK: locking mechanism for failure detection and graceful failover</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">WORKLOAD_PEEK: Lambda@Edge extracts and saves layer 3 header (source ip) from packets</data>
    </node>
    <node id="7">
      <data key="d5">Legacy On-premise System</data>
      <data key="d6">ThirdParty</data>
      <data key="d7">NAME: Legacy On-premise System</data>
    </node>
    <node id="8">
      <data key="d5" />
      <data key="d6">UserConsumerWeb</data>
      <data key="d7" />
    </node>
    <edge source="0" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">4</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">5</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="4" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">6</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="6" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="0" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="7" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="7" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="6" target="3" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="7" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="7" target="4" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <edge source="8" target="3" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Vanguard: A Modern Network TAP Solution for The Cloud</data>
    <data key="d1">https://www.youtube.com/watch?v=EW4X5z7m-0U</data>
    <data key="d2">Video is about network taps and related security.
    Tap: capture network traffic and send it somewhere else to use for analytics.
    Capture all the AWS traffic and send it to the legacy on-premise system.
    This video is a lot more detailed compared to other videos in the series.
    Multiple accounts are being used in this architecture.
    (ELB, EC2) represent an application account. There are many such applications.
    (Kinesis, DynamoDB) are in the security account. The two accounts interact via PrivateLink.
    Lambda@Edge is used to extract the layer 3 network info of a packet, because in later hops this info gets lost. This info is key for analytics.
    2 EC2 servers. First terminates the encrypted connection.
    Second makes Use of loopback intf. The traffic is therefore not leaving the EC2. An agent sniffs the loopback data and captures data unencrypted.
    Agent batches all data and sends to Kinesis over a PrivateLink (cross account communication through PrivateLink).
    Scaling is manual. They configure number of shards in Kinesis based on observed traffic volume.
    Handling ordering of traffic in Kinesis. All packets representing a single session must stay on a single shard. Same session - same port, so use port as hashkey for kinesis stream!
    Legacy consumers spread across mutliple datacenters. (Primary-Backup kind)
    DynamoDB is being used as sort of a locking mechanism for graceful failover. Legacy systems stay in sync with DynamoDB, so failures can be detected and failovers can be done easily.</data>
    <data key="d3">data_ingestion</data>
    <data key="d4">True</data>
  </graph>
</graphml>
