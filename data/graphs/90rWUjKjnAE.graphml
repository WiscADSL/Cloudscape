<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">UserConsumerDeveloper</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5">Git server</data>
      <data key="d6">ThirdParty</data>
      <data key="d7">NAME: Git server</data>
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">EKS</data>
      <data key="d7">WORKLOAD_PEEK: uses web hooks to listen to the git server and react</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">WORKLOAD_PEEK: all base infrastructure</data>
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">SPOT: True
WORKLOAD_PEEK: development/non-productive infrastructure (can tolerate failures and termination); cost benefits of 70-90%</data>
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">Aurora</data>
      <data key="d7">NOTES: if the developer explictly asks for a databse; hardware: r6g
DATA_PEEK: customer(developer)'s app data</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">EBS</data>
      <data key="d7">NOTES: if EKS detects the software need specialized storage (e.g., database, search server); hardware: gp3
DATA_PEEK: customer(developer)'s app data</data>
    </node>
    <node id="7">
      <data key="d5" />
      <data key="d6">EFS</data>
      <data key="d7">NOTES: if EKS detects a general FS is needed
DATA_PEEK: customer(developer)'s app data</data>
    </node>
    <edge source="0" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="2" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="3" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="4" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="6" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="7" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">1'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="6" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="7" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">1'</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="5" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">1'</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">amazee.io: Kubernetes Deployments Made Easy</data>
    <data key="d1">https://www.youtube.com/watch?v=90rWUjKjnAE</data>
    <data key="d2">Open-source software delivery platform (to deploy on Kubernetes).
    Want to keep workflow transparent without thinking of underlying storage, so use EFS and EBS when noticing certain storage is needed.
    This is a SaaS company, so what kind of storage to use depends on what their customers want, which may explain why they use FS.
    Use r6g instances for Aurora and gp3 for EBS after testing and seeing no regression; gp3: cheaper and better IOPS.</data>
    <data key="d3">control</data>
    <data key="d4">True</data>
  </graph>
</graphml>
