<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="type" attr.type="string" />
  <key id="d10" for="edge" attr.name="seq" attr.type="string" />
  <key id="d9" for="edge" attr.name="notes" attr.type="string" />
  <key id="d8" for="edge" attr.name="flow_id" attr.type="long" />
  <key id="d7" for="node" attr.name="notes" attr.type="string" />
  <key id="d6" for="node" attr.name="service" attr.type="string" />
  <key id="d5" for="node" attr.name="name" attr.type="string" />
  <key id="d4" for="graph" attr.name="graph_usable" attr.type="boolean" />
  <key id="d3" for="graph" attr.name="categories" attr.type="string" />
  <key id="d2" for="graph" attr.name="notes" attr.type="string" />
  <key id="d1" for="graph" attr.name="link" attr.type="string" />
  <key id="d0" for="graph" attr.name="name" attr.type="string" />
  <graph edgedefault="directed">
    <node id="0">
      <data key="d5" />
      <data key="d6">UserConsumerWeb</data>
      <data key="d7" />
    </node>
    <node id="1">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">NOTES: behind ALB to scale to handle the loads
WORKLOAD_PEEK: web services for developers to submit code</data>
    </node>
    <node id="2">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">WORKLOAD_PEEK: poll jobs from SQS and launch Lambda to execute</data>
    </node>
    <node id="3">
      <data key="d5" />
      <data key="d6">EC2</data>
      <data key="d7">WORKLOAD_PEEK: do permission check and decide which Lambda to launch</data>
    </node>
    <node id="4">
      <data key="d5" />
      <data key="d6">UserCompanyDeveloper</data>
      <data key="d7" />
    </node>
    <node id="5">
      <data key="d5" />
      <data key="d6">SQS</data>
      <data key="d7">NOTES: use queues because there is limited rate Lambda could be launch, so ec2_1 puts jobs to queue (instead of launch directly), and let ec2_2 to launch whenever it can</data>
    </node>
    <node id="6">
      <data key="d5" />
      <data key="d6">DynamoDB</data>
      <data key="d7">DATA_PEEK: states, e.g., progress of deployment</data>
    </node>
    <node id="7">
      <data key="d5" />
      <data key="d6">Lambda</data>
      <data key="d7">NOTES: use v8 isolate (a JavaScript v8 engine construct) to isolate tenants, e.g., disallow global variable shared across invocations
WORKLOAD_PEEK: execute CI/CD jobs</data>
    </node>
    <edge source="0" target="3" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="6" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="1" target="4" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">3</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="1" target="5" id="0">
      <data key="d8">1</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="2" target="7" id="0">
      <data key="d8">2</data>
      <data key="d9">lambda in a different account</data>
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="3" target="7" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">1</data>
      <data key="d11">data</data>
    </edge>
    <edge source="4" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="5" target="2" id="0">
      <data key="d8">2</data>
      <data key="d9" />
      <data key="d10">0</data>
      <data key="d11">data</data>
    </edge>
    <edge source="6" target="1" id="0">
      <data key="d8">0</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">meta</data>
    </edge>
    <edge source="7" target="0" id="0">
      <data key="d8">3</data>
      <data key="d9" />
      <data key="d10">2</data>
      <data key="d11">data</data>
    </edge>
    <data key="d0">Atlassian: Secure Code Invocation at Scale with Atlassian Forge on AWS</data>
    <data key="d1">https://www.youtube.com/watch?v=H2fOkeXxpyw</data>
    <data key="d2">atlassian forge. Scaling: 1000s of customers. limit on lambda thats why many EC2. multi-tenant SaaS application.Launch Lambda to execute CI/CD jobs; Lambda are in a different account (but shared by multiple tenants)
 'And we are typically limited on the control plane, on Lambda,
 on how many invocations we can do, how many Lambdas we can create
 in a certain time interval.'</data>
    <data key="d3">control</data>
    <data key="d4">True</data>
  </graph>
</graphml>
